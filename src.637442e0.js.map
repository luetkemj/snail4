{"version":3,"sources":["../node_modules/overprint/overprint/char.js","../node_modules/overprint/overprint/font.js","../node_modules/overprint/overprint/color.js","../node_modules/overprint/overprint/glyph.js","../node_modules/overprint/overprint/cell.js","../node_modules/overprint/overprint/display-state.js","../node_modules/overprint/overprint/text-grid.js","ECS/Entity.js","ECS/components/appearance.component.js","ECS/components/player-controlled.component.js","ECS/components/position.component.js","ECS/systems/move.system.js","ECS/systems/render.system.js","ECS/ECS.js","ECS/key-bindings.js","index.js"],"names":["Char","Font","family","weight","size","toCSS","Color","BLACK","WHITE","Glyph","character","color","bgColor","char","NULL","Cell","foregroundColor","backgroundColor","blank","DisplayState","fillArray2D","width","height","fill","list","Array","col","row","constructor","_width","_height","_renderedCells","_updatedCells","_dirty","setCharacter","x","y","setCell","cell","getCell","render","callback","TextGrid","defaultSettings","font","emptyCell","isResponsive","forceSquare","canvas","settings","_settings","Object","assign","_font","_responsive","_squared","_emptyCell","_canvas","_context","getContext","_ratio","window","devicePixelRatio","_display","resetLayout","clear","style","elementWidth","parseInt","elementHeight","_cellWidth","Math","floor","_cellHeight","max","textMeasure","measureText","textWidth","ceil","textHeight","drawWidth","drawHeight","textAlign","textBaseline","readCell","writeCell","writeCharacter","cellWidth","cellHeight","fillStyle","fillRect","xPos","yPos","fillText","pxToCell","ev","bounds","getBoundingClientRect","relativeX","clientX","left","relativeY","clientY","top","trunc","onClick","handler","addEventListener","onMouseMove","Entity","id","Date","toString","random","components","addComponent","component","name","removeComponent","componentName","print","console","log","JSON","stringify","componentAppearance","params","componentPlayerControlled","playerControlled","position","move","attemptMove","entity","ECS","game","grid","mx","min","my","entities","keys","forEach","key","userInput","type","payload","appearance","document","querySelector","WIDTH","HEIGHT","FONT_SIZE","systems","playerTurn","input","player","gameTick","i","length","update","gameLoop","requestAnimationFrame"],"mappings":"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","file":"src.637442e0.js","sourceRoot":"../src","sourcesContent":["const Char = {}\n\nChar.WHITE_SMILING_FACE = '☺';\nChar.BLACK_SMILING_FACE = '☻';\nChar.BLACK_HEART_SUIT = '♥';\nChar.BLACK_DIAMOND_SUIT = '♦';\nChar.BLACK_CLUB_SUIT = '♣';\nChar.BLACK_SPADE_SUIT = '♠';\nChar.BULLET = '•';\nChar.INVERSE_BULLET = '◘';\nChar.WHITE_CIRCLE = '○';\nChar.INVERSE_WHITE_CIRCLE = '◙';\nChar.MALE_SIGN = '♂';\nChar.FEMALE_SIGN = '♀';\nChar.EIGHTH_NOTE = '♪';\nChar.BEAMED_EIGHTH_NOTES = '♫';\nChar.WHITE_SUN_WITH_RAYS = '☼';\n\nChar.NULL = ' ';\nChar.SPACE = ' ';\nChar.AMPERSAND = '&';\nChar.DOT = '.';\nChar.FULL_STOP = '.';\nChar.PLUS = '+';\nChar.MINUS = '-';\nChar.HASH = '#';\nChar.DOLLAR = '$';\nChar.PERCENT = '%';\nChar.CARET = '^';\nChar.ASTERISK = '*';\nChar.TILDE = '~';\nChar.LEFT_PARENS = '(';\nChar.RIGHT_PARENS = ')';\nChar.LEFT_BRACKET = '[';\nChar.RIGHT_BRACKET = ']';\nChar.AT = '@';\n\nexport default Char;\n","const Font = function(family, weight, size) {\n\treturn {\n\t\tfamily: family || 'monospace',\n\t\tweight: weight || 'normal',\n\t\tsize: size || 16,\n\t\ttoCSS: function() {\n\t\t\treturn this.weight + ' '+ this.size +'px ' + this.family;\n\t\t}\n\t}\n}\n\nexport default Font;\n","const Color = {\n  BLACK: '#000',\n  WHITE: '#fff'\n}\n\nexport default Color;\n","import Char from './char'\nimport Color from './color'\n\nconst Glyph = function(character, color, bgColor) {\n\treturn {\n\t\tchar: character || Char.NULL,\n\t\tcolor: color || Color.WHITE,\n\t\tbgColor: bgColor || Color.BLACK\n\t}\n}\n\nexport default Glyph;\n","import Char from './char'\nimport Color from './color'\n\nconst Cell = function(character, foregroundColor, backgroundColor) {\n\treturn {\n\t\tcharacter: character || Char.NULL,\n\t\tforegroundColor: foregroundColor || Color.WHITE,\n\t\tbackgroundColor: backgroundColor || Color.BLACK\n\t}\n}\n\nCell.blank = function(backgroundColor) {\n  return Cell(false, false, backgroundColor);\n}\n\nexport default Cell;\n","function fillArray2D(width, height, fill) {\n  const list = new Array(width);\n  for (let col=0; col<width; col++) {\n    list[col] = new Array(height);\n    for (let row=0; row<height; row++) {\n      list[col][row] = fill;\n    }\n  }\n  return list;\n}\n\nclass DisplayState {\n  constructor(width, height) {\n    this._width = width;\n  \tthis._height = height;\n\n    this._renderedCells = fillArray2D(width, height, null);\n  \tthis._updatedCells = fillArray2D(width, height, null);\n\n  \tthis._dirty = true;\n  }\n\n  setCharacter(x, y, character) {\n    if (x < 0) return;\n    if (x >= this._width) return;\n    if (y < 0) return;\n    if (y >= this._height) return;\n\n    if (!character) return;\n\n    if (this._renderedCells[x][y].character != character) {\n      const foregroundColor = this._updatedCells[x][y].foregroundColor || this._renderedCells[x][y].foregroundColor\n      const backgroundColor = this._updatedCells[x][y].backgroundColor || this._renderedCells[x][y].backgroundColor\n      this._updatedCells[x][y] = {\n        character,\n        foregroundColor,\n        backgroundColor\n      };\n      this._dirty = true;\n    } else {\n      this._updatedCells[x][y] = null;\n    }\n  }\n\n  setCell(x, y, cell) {\n  \tif (x < 0) return;\n  \tif (x >= this._width) return;\n  \tif (y < 0) return;\n  \tif (y >= this._height) return;\n\n  \tif (this._renderedCells[x][y] !== cell) {\n  \t\tthis._updatedCells[x][y] = cell;\n  \t\tthis._dirty = true;\n  \t} else {\n  \t\tthis._updatedCells[x][y] = null;\n  \t}\n  }\n\n  getCell(x, y) {\n    if (x < 0) return;\n  \tif (x >= this._width) return;\n  \tif (y < 0) return;\n  \tif (y >= this._height) return;\n\n    return this._updatedCells[x][y] || this._renderedCells[x][y];\n  }\n\n  render(callback) {\n  \tif (!this._dirty) return;\n    let cell;\n\n  \tfor (let col=0; col<this._width; col++) {\n  \t\tfor (let row=0; row<this._height; row++) {\n  \t\t\tcell = this._updatedCells[col][row];\n\n  \t\t\tif (cell == null) continue;\n\n  \t\t\tcallback(col, row, cell);\n\n  \t\t\tthis._renderedCells[col][row] = cell;\n  \t\t\tthis._updatedCells[col][row] = null;\n  \t\t}\n  \t}\n  }\n}\n\nexport default DisplayState;\n","import Char from \"./char\";\nimport Font from \"./font\";\nimport Glyph from \"./glyph\";\nimport Cell from \"./cell\";\nimport DisplayState from \"./display-state\";\n\nconst defaultSettings = {\n  width: 40,\n  height: 30,\n  font: Font(),\n  emptyCell: Cell(),\n  isResponsive: false,\n  forceSquare: true\n}\n\nclass TextGrid {\n  constructor(canvas, settings) {\n    const _settings = Object.assign(defaultSettings, { ...settings });\n    this._width = _settings.width;\n  \tthis._height = _settings.height;\n  \tthis._font = _settings.font;\n  \tthis._responsive = _settings.isResponsive;\n  \tthis._squared = _settings.forceSquare;\n    this._emptyCell = _settings.emptyCell;\n\n    this._canvas = canvas;\n    this._context = this._canvas.getContext('2d');\n  \tthis._context.font = this._font.toCSS();\n\n    this._ratio = window.devicePixelRatio || 1;\n    this._display = new DisplayState(this._width, this._height);\n\n    this.resetLayout();\n    this.clear();\n  }\n\n  resetLayout() {\n    if (this._responsive) {\n  \t\t// Calculates the dimensions of the containing element first\n  \t\tif (!this._canvas.style.width) this._canvas.style.width = 640;\n  \t\tif (!this._canvas.style.height) this._canvas.style.height = 480;\n\n  \t\tconst elementWidth = parseInt(this._canvas.style.width, 10)  * this._ratio;\n  \t\tconst elementHeight = parseInt(this._canvas.style.height, 10) * this._ratio;\n\n  \t\t// Calculates cell width and height based on the containing element\n  \t\tthis._cellWidth = Math.floor(elementWidth / this._width);\n  \t\tthis._cellHeight = Math.floor(elementHeight / this._height);\n\n  \t\t// Force square aspect ratio\n  \t\tif (this._squared) {\n  \t\t\tthis._cellWidth = this._cellHeight = Math.max(this._cellWidth, this._cellHeight);\n  \t\t}\n\n  \t\tthis._canvas.width = elementWidth;\n  \t\tthis._canvas.height = elementHeight;\n\n  \t} else {\n  \t\t// Measure text width from canvas context\n  \t\tconst textMeasure = this._context.measureText(\"M\");\n\n  \t\t// Canvas measure text with direct multiple of font size\n  \t\tlet textWidth = Math.ceil(textMeasure.width);\n  \t\tlet textHeight = this._font.size;\n\n  \t\t// Force square aspect ratio\n  \t\tif (this._squared) {\n  \t\t\ttextWidth = textHeight = Math.max(textWidth, textHeight);\n  \t\t}\n\n  \t\tthis._cellWidth = textWidth * this._ratio;\n  \t\tthis._cellHeight = textHeight * this._ratio;\n\n  \t\tconst drawWidth = textWidth * this._width;\n  \t\tconst drawHeight = textHeight * this._height;\n\n  \t\tthis._canvas.width = drawWidth * this._ratio;\n  \t\tthis._canvas.height = drawHeight * this._ratio;\n\n      this._canvas.style.width = `${drawWidth}px`;\n  \t\tthis._canvas.style.height = `${drawHeight}px`;\n  \t}\n\n  \tthis._font.size = this._font.size * this._ratio;\n  \tthis._context.font = this._font.toCSS();\n  \tthis._context.textAlign = 'center';\n  \tthis._context.textBaseline = 'middle';\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  clear() {\n    this.fill(this._emptyCell);\n  }\n\n  fill(cell) {\n    for (let col=0; col<this._width; col++) {\n      for (let row=0; row<this._height; row++) {\n        this._display.setCell(col, row, cell);\n      }\n    }\n  }\n\n  readCell(x, y) {\n    return this._display.getCell(x, y);\n  }\n\n  writeCell(x, y, cell) {\n    this._display.setCell(x, y, cell);\n  }\n\n  writeCharacter(x, y, character) {\n    this._display.setCharacter(x, y, character);\n  }\n\n  render() {\n    this._display.render((x, y, cell) => {\n      const cellWidth = this._cellWidth;\n      const cellHeight = this._cellHeight;\n\n      this._context.fillStyle = cell.backgroundColor;\n      this._context.fillRect(x * cellWidth, y * cellHeight, cellWidth, cellHeight);\n\n      if (cell.character == Char.NULL) return;\n\n      this._context.fillStyle = cell.foregroundColor;\n\n      const xPos = (x * cellWidth) + cellWidth / 2;\n      const yPos = (y * cellHeight) + cellHeight / 2;\n      this._context.fillText(cell.character, xPos, yPos);\n    });\n  }\n\n  pxToCell(ev) {\n  \tconst bounds = this._canvas.getBoundingClientRect();\n  \tconst relativeX = ev.clientX - bounds.left;\n  \tconst relativeY = ev.clientY - bounds.top;\n  \tconst colPos = Math.trunc(relativeX / this._cellWidth * this._ratio);\n  \tconst rowPos = Math.trunc(relativeY / this._cellHeight * this._ratio);\n  \treturn [colPos, rowPos];\n  }\n\n  onClick(handler) {\n    this._canvas.addEventListener('click', (ev) => {\n      const cell = this.pxToCell(ev);\n      handler(cell[0], cell[1]);\n    });\n  }\n\n  onMouseMove(handler) {\n    this._canvas.addEventListener('mousemove', (ev) => {\n      const cell = this.pxToCell(ev);\n      handler(cell[0], cell[1]);\n    });\n  }\n}\n\nexport default TextGrid;\n","const Entity = () => {\n  const id =\n    (+new Date()).toString(16) + ((Math.random() * 100000000) | 0).toString(16);\n\n  const components = {};\n\n  const addComponent = component => {\n    components[component.name] = component;\n  };\n\n  const removeComponent = componentName => {\n    delete components[componentName];\n  };\n\n  const print = function print() {\n    console.log(JSON.stringify(this, null, 2));\n  };\n\n  return {\n    id,\n    components,\n    addComponent,\n    removeComponent,\n    print\n  };\n};\n\nexport default Entity;\n","const componentAppearance = (params = {}) => {\n  const name = \"appearance\";\n  const { color = \"#ff0077\", char = \"?\" } = params;\n\n  return {\n    name,\n    color,\n    char\n  };\n};\n\nexport default componentAppearance;\n","const componentPlayerControlled = (params = {}) => {\n  const name = \"playerControlled\";\n\n  return {\n    name,\n    playerControlled: true\n  };\n};\n\nexport default componentPlayerControlled;\n","const position = function componentPosition(params = {}) {\n  const name = \"position\";\n  const { x = 0, y = 0 } = params;\n\n  return {\n    name,\n    x,\n    y\n  };\n};\n\nexport default position;\n","import ECS from \"../ECS\";\n\nconst attemptMove = (entity, x, y) => {\n  const {\n    components: { position }\n  } = entity;\n\n  const {\n    game: {\n      grid: { width, height }\n    }\n  } = ECS;\n\n  // observe map boundaries\n  const mx = Math.min(width - 1, Math.max(0, position.x + x));\n  const my = Math.min(height - 1, Math.max(0, position.y + y));\n\n  position.x = mx;\n  position.y = my;\n};\n\nconst move = entities => {\n  Object.keys(entities).forEach(key => {\n    const {\n      components: { position, playerControlled }\n    } = entities[key];\n\n    if (position && playerControlled) {\n      if (ECS.game.userInput && ECS.game.userInput.type === \"MOVE\") {\n        const { x, y } = ECS.game.userInput.payload;\n\n        attemptMove(entities[key], x, y);\n      }\n    }\n  });\n};\n\nexport default move;\n","import ECS from \"../ECS\";\nimport Cell from \"overprint/overprint/cell\";\n\nconst render = entities => {\n  ECS.game.grid.clear();\n\n  Object.keys(entities).forEach(key => {\n    const {\n      components: { appearance, position }\n    } = entities[key];\n\n    if (appearance && position) {\n      ECS.game.grid.writeCell(\n        position.x,\n        position.y,\n        Cell(appearance.char, appearance.color)\n      );\n    }\n  });\n\n  ECS.game.grid.render();\n};\n\nexport default render;\n","import TextGrid from \"overprint/overprint/text-grid\";\nimport Font from \"overprint/overprint/font\";\nimport Entity from \"./Entity\";\n\nconst canvas = document.querySelector(\"#game\");\n\n// components\nimport appearance from \"./components/appearance.component\";\nimport playerControlled from \"./components/player-controlled.component\";\nimport position from \"./components/position.component\";\n\n// systems\nimport move from \"./systems/move.system\";\nimport render from \"./systems/render.system\";\n\nconst WIDTH = 80;\nconst HEIGHT = 50;\nconst FONT_SIZE = 15;\n\nconst ECS = {\n  entities: {},\n  components: { appearance, playerControlled, position },\n  systems: [move, render],\n  game: {\n    userInput: null,\n    playerTurn: true,\n    grid: new TextGrid(canvas, {\n      width: WIDTH,\n      height: HEIGHT,\n      font: Font(\"Menlo\", false, FONT_SIZE)\n    })\n  },\n  Entity\n};\n\nexport default ECS;\n","import ECS from \"./ECS\";\n\nexport default function input(key) {\n  switch (key) {\n    case \"o\": {\n      ECS.game.userInput = { key, type: \"TOGGLE_OMNISCIENCE\", payload: {} };\n      break;\n    }\n    case \"z\": {\n      ECS.game.userInput = { key, type: \"REST\", payload: {} };\n      break;\n    }\n    case \"ArrowUp\":\n      ECS.game.userInput = { key, type: \"MOVE\", payload: { x: 0, y: -1 } };\n      break;\n    case \"ArrowDown\":\n      ECS.game.userInput = { key, type: \"MOVE\", payload: { x: 0, y: 1 } };\n      break;\n    case \"ArrowLeft\":\n      ECS.game.userInput = { key, type: \"MOVE\", payload: { x: -1, y: 0 } };\n      break;\n    case \"ArrowRight\":\n      ECS.game.userInput = { key, type: \"MOVE\", payload: { x: 1, y: 0 } };\n      break;\n  }\n}\n","import ECS from \"./ECS/ECS\";\nimport userInput from \"./ECS/key-bindings\";\n\nconst player = ECS.Entity();\nplayer.addComponent(ECS.components.appearance({ char: \"@\", color: \"#daa520\" }));\nplayer.addComponent(ECS.components.playerControlled());\nplayer.addComponent(ECS.components.position());\n\nplayer.print();\n\nECS.entities[player.id] = player;\n\ndocument.addEventListener(\"keydown\", ev => userInput(ev.key));\n\nfunction gameTick() {\n  for (let i = 0; i < ECS.systems.length; i++) {\n    ECS.systems[i](ECS.entities);\n  }\n}\n\n// initialize the game by running systems out of the gate\ngameTick();\n\nfunction update() {\n  if (ECS.game.userInput && ECS.game.playerTurn) {\n    gameTick();\n    ECS.game.userInput = null;\n    ECS.game.playerTurn = false;\n  }\n\n  if (!ECS.game.playerTurn) {\n    gameTick();\n    ECS.game.playerTurn = true;\n  }\n}\n\nfunction gameLoop() {\n  update();\n  requestAnimationFrame(gameLoop);\n}\n\nrequestAnimationFrame(gameLoop);\n"]}